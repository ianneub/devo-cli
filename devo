#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require_relative 'lib/amazon'

class MyApplication
	include Commander::Methods
	include Amazon

	def run
		program :name, 'devo'
		program :version, '0.3.0'
		program :description, 'Devops Tool for Mode Media'

		command :run do |c|
			c.syntax = 'devo run [options]'
			c.summary = 'Run and exec into a one off docker instance based on an existing task.'
			c.description = 'SSH into a staging instance and run a new docker instance with env vars from an existing ECS task.'
			c.example 'run a command in the context of a task definition', 'devo run rails console'
			c.option '-c CLUSTER', '--cluster CLUSTER', String, 'Cluster name to launch into'
			c.option '--task-definition TASK_DEFINITION', String, 'Task definiton family name'
			c.option '-p', '--[no-]print', 'Output command that would be used to stdout and exit.'
			c.action do |args, options|
				options.default task_definition: 'prise-production-worker', cluster: 'production', print: false

				instance_id = find_instance_id!(options.cluster)
				instance_ip = find_ip_address!(instance_id)
				task_data = find_task_data!(options.task_definition)

				envs = task_data[:environment].map {|e| "-e #{e.name}=#{e.value}" }

				ecr_data = get_authorization_token

				creds = get_aws_credentials!(task_data[:role])
				if creds
					envs << "-e AWS_ACCESS_KEY_ID=#{creds.access_key_id}"
					envs << "-e AWS_SECRET_ACCESS_KEY=#{creds.secret_access_key}"
					envs << "-e AWS_SESSION_TOKEN=#{creds.session_token}"
				end

				cmd = "ssh -t #{instance_ip} docker run -it --rm #{envs.join(' ')} #{task_data[:image]} #{args.join(' ')}"
				if options.print
					puts cmd
				else
					system "ssh #{instance_ip} docker login -u #{ecr_data[:user]} -p #{ecr_data[:password]} #{ecr_data[:endpoint]}"
					exec cmd
				end
			end
		end

		command :exec do |c|
			c.syntax = 'devo exec [options]'
			c.summary = 'Exec into a running docker instance.'
			c.description = 'SSH into a running ECS Container Instance and exec into a running docker container.'
			c.example 'run a command in the context of the staging environment', 'devo exec rails console'
			c.option '-c CLUSTER', '--cluster CLUSTER', String, 'Cluster name to exec into.'
			c.option '-s SERVICE', '--service SERVICE', String, 'Service to exec into.'
			c.option '--container-name CONTAINER_NAME', String, 'Container name to exec into.'
			c.action do |args, options|
				options.default cluster: 'staging', service: 'prise-staging', container_name: 'worker'

				id, ip = find_runtime_id_and_ip!(options.cluster, options.service, options.container_name)
				raise "Could not find docker id for container: #{options.cluster}:#{options.service}:#{options.container_name}" unless id

				cmd = "ssh -t #{ip} docker exec -it #{id} #{args.join(' ')}"

				puts "Connecting to #{ip} ..."
				exec cmd
			end
		end
		alias_command :staging, :exec, '--cluster', 'staging', '--service', 'prise-staging', '--container_name', 'worker'
		alias_command :prod, :exec, '--cluster', 'production', '--service', 'prise-production-worker', '--container_name', 'worker'
		alias_command :devops, :exec, '--cluster', 'aux', '--service', 'devops-web-worker', '--container_name', 'worker'

		command :ecs_find_env_value do |c|
			c.syntax = 'devo ecs_find_env_value -s value'
			c.option '-s VALUE', '--value VALUE', String, 'Value to search for.'
			c.action do |args, options|
				data = {}
				ecs = Aws::ECS::Client.new
				ecs.list_task_definitions[:task_definition_arns].each do |task_def|
					ecs.describe_task_definition(task_definition: task_def)[:task_definition][:container_definitions].each do |container_def|
						container_def[:environment].each do |env_var|
							if env_var[:value].include?(options.value)
								puts task_def
								puts "#{env_var.name} => #{env_var.value}"
								puts
							end
						end
					end
				end
			end
		end

		command :ssh do |c|
			c.description = 'Execute a command on all running instanes'
			c.action do |args, _options|
				find_all_running_instance_public_ip_addresses.each do |ip|
					cmd = "ssh -t #{ip} #{args.join(' ')}"
					system cmd
				end
			end
		end

		run!
	end
end

MyApplication.new.run if $0 == __FILE__
